{/* Render message content based on type */}
{message.metadata?.messageType === 'image' ? (
  <div className="space-y-2">
    <div className="flex items-center space-x-2">
      <ImageIcon className="w-4 h-4" />
      <span className="text-sm font-semibold">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</span>
    </div>
    {message.metadata.originalContentUrl ? (
      <a href={message.metadata.originalContentUrl} target="_blank" rel="noopener noreferrer" className="block mt-2">
        <img
          src={message.metadata.previewImageUrl || message.metadata.originalContentUrl}
          alt="User sent image"
          className="max-w-48 max-h-48 rounded-lg shadow-md object-cover cursor-pointer"
          onError={(e) => { e.currentTarget.src = 'https://via.placeholder.com/150?text=Image+Load+Error'; }} // Fallback image
        />
      </a>
    ) : (
      <div className="text-xs text-gray-500">‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</div>
    )}
    {message.content && <p className="text-sm whitespace-pre-wrap mt-2">{message.content}</p>}
  </div>
) : message.metadata?.messageType === 'sticker' ? (
  <div className="space-y-2">
    <div className="flex items-center space-x-2">
      <span className="text-lg">üòÄ</span>
      <span className="text-sm font-semibold">‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå</span>
    </div>
    {/* Line Sticker images can be loaded via a specific URL pattern */}
    {message.metadata.packageId && message.metadata.stickerId ? (
      <img
        src={`https://stickershop.line-scdn.net/stickershop/v1/sticker/${message.metadata.stickerId}/android/sticker.png`}
        alt="Line Sticker"
        className="w-24 h-24 object-contain"
        onError={(e) => { e.currentTarget.src = 'https://via.placeholder.com/100?text=Sticker+Error'; }} // Fallback sticker
      />
    ) : (
      <div className="text-xs text-gray-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå</div>
    )}
    {message.content && <p className="text-sm whitespace-pre-wrap mt-2">{message.content}</p>}
  </div>
) : message.metadata?.messageType && message.metadata.messageType !== 'text' ? (
  // Handle other file types like video, audio, file (if content field holds URL/description)
  <div className="space-y-2">
    <div className="flex items-center space-x-2">
      <FileIcon className="w-4 h-4" />
      <span className="text-sm font-semibold">{message.metadata.messageType.charAt(0).toUpperCase() + message.metadata.messageType.slice(1)}</span>
    </div>
    {/* You might want to add specific handling for video/audio (e.g., <video> or <audio> tags) */}
    {message.metadata.originalContentUrl && (
      <a href={message.metadata.originalContentUrl} target="_blank" rel="noopener noreferrer" className="text-sm text-blue-600 hover:underline">
        ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå {message.metadata.messageType}
      </a>
    )}
    <p className="text-sm whitespace-pre-wrap mt-2">{message.content}</p>
  </div>
) : (
  // Default to text message
  <p className="text-sm whitespace-pre-wrap">{message.content}</p>
)}